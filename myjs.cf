entrypoints Program ;

Progr.          Program ::= [Stmt] ;

[].             [Stmt]  ::= ;
(:[]).          [Stmt]  ::= Stmt;
(:).            [Stmt]  ::= Stmt [Stmt];

NoIdent.        MaybeIdent ::= ;
JustIdent.      MaybeIdent ::= Ident;

VarDecl.        Decl    ::= "var" Ident ";";
VarDeclAssign.  Decl    ::= "var" Ident "=" Expr ";";
FunDecl.        Decl    ::= FunExpr;
CS.             CompoundStmt    ::= "{" [Stmt] "}";

CSS.            Stmt    ::= CompoundStmt;
ExprStmt.       Stmt    ::= Expr ";";
DeclStmt.       Stmt    ::= Decl;
EmptyStmt.      Stmt    ::= ";";

QIdent.         Lvalue ::= [QIdentPart];
IdentPart.      QIdentPart ::= IIdent;
(:[]).          [QIdentPart] ::= QIdentPart;
(:).            [QIdentPart] ::= QIdentPart "." [QIdentPart];

IIdentBare.     IIdent ::= Ident;
IIdentIndexed.  IIdent ::= Ident "[" Expr "]";

ParamNameList.  ParamNames   ::= "(" [Ident] ")";
[].             [Ident]  ::= ;
(:[]).          [Ident]  ::= Ident;
(:).            [Ident]  ::= Ident "," [Ident] ;

ParamList.      Params   ::= "(" [Param] ")";
ParamExpr.      Param    ::= Expr;
[].             [Param]  ::= ;
(:[]).          [Param]  ::= Param;
(:).            [Param]  ::= Param "," [Param] ;

KVP.            KeyValuePair ::= Key ":" Expr;

KeyIdent.       Key ::= Ident;
KeyString.      Key ::= String;

[].             [KeyValuePair]  ::= ;
(:[]).          [KeyValuePair]  ::= KeyValuePair;
(:).            [KeyValuePair]  ::= KeyValuePair "," [KeyValuePair];


IntLiteral.     Literal ::= Integer;
StringLiteral.  Literal ::= String;
TrueLiteral.    Literal ::= "true";
FalseLiteral.    Literal ::= "false";
UndefinedLiteral. Literal ::= "undefined";
ObjectLiteral.  Literal    ::= "{" [KeyValuePair] "}" ;
ArrayLiteral.   Literal    ::= "[" [Param] "]";

Fun.                FunExpr ::= "function" MaybeIdent ParamNames CompoundStmt;
FunExpression.      Expr    ::= FunExpr;

AssignExpr.         Expr    ::= Lvalue "=" Expr;
LOrExpr.            Expr2   ::= Expr2 "||" Expr3;
LAndExpr.           Expr3   ::= Expr3 "&&" Expr4;
EqExpr.             Expr4   ::= Expr4 "===" Expr5;
NeqExpr.            Expr4   ::= Expr4 "!==" Expr5;
LessExpr.           Expr5  ::= Expr5 "<" Expr6;
GreaterExpr.        Expr5  ::= Expr5 ">" Expr6;
LeqExpr.            Expr5  ::= Expr5 "<=" Expr6;
GeqExpr.            Expr5  ::= Expr5 ">=" Expr6;
PlusExpr.           Expr6  ::= Expr6 "+" Expr7;
MinusExpr.          Expr6  ::= Expr6 "-" Expr7;
TimesExpr.          Expr6  ::= Expr6 "*" Expr7;
DivExpr.            Expr6  ::= Expr6 "/" Expr7;
PreincExpr.         Expr7  ::= "++" Lvalue;
PredecExpr.         Expr7  ::= "--" Lvalue;
PreopExpr.          Expr8  ::= UnaryOp Expr9;
ParenExpr.          Expr9  ::= "(" Expr ")";
CallExpr.           Expr10  ::= Lvalue Params;
LiteralExpr.        Expr11  ::= Literal;
EvalExpr.           Expr12  ::= Lvalue;

NegOp.              UnaryOp ::= "!";

IfStmt.             Stmt  ::= "if" "(" Expr ")" Stmt ElseClause;
Else.               ElseClause ::= "else" Stmt ;
ElseEmpty.          ElseClause ::= ;

WhileStmt.          Stmt ::= "while" "(" Expr ")" Stmt;
ThrowStmt.          Stmt ::= "throw" Expr;
TryCatchStmt.       Stmt ::= "try" CompoundStmt "catch" "(" Ident ")" CompoundStmt;
ReturnStmt.         Stmt ::= "return" Expr ";";
EmptyReturnStmt.    Stmt ::= "return;";

coercions Expr 18 ;

comment "//" ;
comment "/*" "*/" ;
