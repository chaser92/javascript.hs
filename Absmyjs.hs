

module Absmyjs where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Program =
   Progr [Stmt]
  deriving (Eq,Ord,Show,Read)

data MaybeIdent =
   NoIdent
 | JustIdent Ident
  deriving (Eq,Ord,Show,Read)

data Decl =
   VarDecl Ident
 | VarDeclAssign Ident Expr
 | FunDecl FunExpr
  deriving (Eq,Ord,Show,Read)

data CompoundStmt =
   CS [Stmt]
  deriving (Eq,Ord,Show,Read)

data Stmt =
   CSS CompoundStmt
 | ExprStmt Expr
 | DeclStmt Decl
 | EmptyStmt
 | IfStmt Expr Stmt ElseClause
 | WhileStmt Expr Stmt
 | ThrowStmt Expr
 | TryCatchStmt CompoundStmt Ident CompoundStmt
 | ReturnStmt Expr
 | EmptyReturnStmt
  deriving (Eq,Ord,Show,Read)

data Lvalue =
   QIdent [QIdentPart]
  deriving (Eq,Ord,Show,Read)

data QIdentPart =
   IdentPart IIdent
  deriving (Eq,Ord,Show,Read)

data IIdent =
   IIdentBare Ident
 | IIdentIndexed Ident Expr
  deriving (Eq,Ord,Show,Read)

data ParamNames =
   ParamNameList [Ident]
  deriving (Eq,Ord,Show,Read)

data Params =
   ParamList [Param]
  deriving (Eq,Ord,Show,Read)

data Param =
   ParamExpr Expr
  deriving (Eq,Ord,Show,Read)

data KeyValuePair =
   KVP Key Expr
  deriving (Eq,Ord,Show,Read)

data Key =
   KeyIdent Ident
 | KeyString String
  deriving (Eq,Ord,Show,Read)

data Literal =
   IntLiteral Integer
 | StringLiteral String
 | TrueLiteral
 | FalseLiteral
 | UndefinedLiteral
 | ObjectLiteral [KeyValuePair]
 | ArrayLiteral [Param]
  deriving (Eq,Ord,Show,Read)

data FunExpr =
   Fun MaybeIdent ParamNames CompoundStmt
  deriving (Eq,Ord,Show,Read)

data Expr =
   FunExpression FunExpr
 | AssignExpr Lvalue Expr
 | CondExpr Expr Expr Expr
 | LOrExpr Expr Expr
 | LAndrExpr Expr Expr
 | BitOrExpr Expr Expr
 | BitXorExpr Expr Expr
 | BitAndExpr Expr Expr
 | EqExpr Expr Expr
 | NeqExpr Expr Expr
 | LessExpr Expr Expr
 | GreaterExpr Expr Expr
 | LeqExpr Expr Expr
 | GeqExpr Expr Expr
 | ShlExpr Expr Expr
 | ShrExpr Expr Expr
 | PlusExpr Expr Expr
 | MinusExpr Expr Expr
 | TimesExpr Expr Expr
 | DivExpr Expr Expr
 | ModExpr Expr Expr
 | PreincExpr Expr
 | PredecExpr Expr
 | PreopExpr UnaryOp Expr
 | TypeofExpr Expr
 | ParenExpr Expr
 | CallExpr Lvalue Params
 | LiteralExpr Literal
 | EvalExpr Lvalue
  deriving (Eq,Ord,Show,Read)

data UnaryOp =
   NegOp
 | TildeOp
  deriving (Eq,Ord,Show,Read)

data ElseClause =
   Else Stmt
 | ElseEmpty
  deriving (Eq,Ord,Show,Read)

