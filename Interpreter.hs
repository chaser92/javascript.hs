-- automatically generated by BNF Converter
module Main where

import System.IO
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import Lexmyjs
import Parmyjs
import Skelmyjs
import Printmyjs
import Absmyjs
import JSInterpreter

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then hPutStrLn stderr s else return ()

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do hPutStrLn stderr "\nParse Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          hPutStrLn stderr s
                          exitFailure
           Ok  tree -> do --putStrLn "\nParse Successful!"
                          --showTree v tree
                          printOutputAndExit $ exec tree


printOutputAndExit (Left err, _) = do
                   hPutStrLn stderr $ "Unhandled error: " ++ (show err)
                   exitFailure
printOutputAndExit (Right output, _) = do
                   putStr $ show output
                   exitSuccess
                   
showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

main :: IO ()
main = do args <- getArgs
          case args of
            [] -> hGetContents stdin >>= run 2 pProgram
            "-s":fs -> mapM_ (runFile 0 pProgram) fs
            fs -> mapM_ (runFile 2 pProgram) fs

runs = run 2 pProgram
