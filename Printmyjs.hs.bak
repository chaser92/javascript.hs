{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printmyjs where

-- pretty-printer generated by the BNF converter

import Absmyjs
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])



instance Print Program where
  prt i e = case e of
   Progr stmts -> prPrec i 0 (concatD [prt 0 stmts])


instance Print MaybeIdent where
  prt i e = case e of
   NoIdent  -> prPrec i 0 (concatD [])
   JustIdent id -> prPrec i 0 (concatD [prt 0 id])


instance Print Decl where
  prt i e = case e of
   VarDecl id -> prPrec i 0 (concatD [doc (showString "var") , prt 0 id , doc (showString ";")])
   VarDeclAssign id expr -> prPrec i 0 (concatD [doc (showString "var") , prt 0 id , doc (showString "=") , prt 0 expr , doc (showString ";")])
   FunDecl funexpr -> prPrec i 0 (concatD [prt 0 funexpr])


instance Print CompoundStmt where
  prt i e = case e of
   CS stmts -> prPrec i 0 (concatD [doc (showString "{") , prt 0 stmts , doc (showString "}")])


instance Print Stmt where
  prt i e = case e of
   CSS compoundstmt -> prPrec i 0 (concatD [prt 0 compoundstmt])
   ExprStmt expr -> prPrec i 0 (concatD [prt 0 expr , doc (showString ";")])
   DeclStmt decl -> prPrec i 0 (concatD [prt 0 decl])
   EmptyStmt  -> prPrec i 0 (concatD [doc (showString ";")])
   IfStmt expr stmt elseclause -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt , prt 0 elseclause])
   WhileStmt expr stmt -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt])
   ThrowStmt expr -> prPrec i 0 (concatD [doc (showString "throw") , prt 0 expr])
   TryCatchStmt compoundstmt0 id compoundstmt -> prPrec i 0 (concatD [doc (showString "try") , prt 0 compoundstmt0 , doc (showString "catch") , doc (showString "(") , prt 0 id , doc (showString ")") , prt 0 compoundstmt])
   ReturnStmt expr -> prPrec i 0 (concatD [doc (showString "return") , prt 0 expr , doc (showString ";")])
   EmptyReturnStmt  -> prPrec i 0 (concatD [doc (showString "return;")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Lvalue where
  prt i e = case e of
   QIdent qidentparts -> prPrec i 0 (concatD [prt 0 qidentparts])


instance Print QIdentPart where
  prt i e = case e of
   IdentPart iident -> prPrec i 0 (concatD [prt 0 iident])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ".") , prt 0 xs])

instance Print IIdent where
  prt i e = case e of
   IIdentBare id -> prPrec i 0 (concatD [prt 0 id])
   IIdentIndexed id expr -> prPrec i 0 (concatD [prt 0 id , doc (showString "[") , prt 0 expr , doc (showString "]")])


instance Print ParamNames where
  prt i e = case e of
   ParamNames ids -> prPrec i 0 (concatD [doc (showString "(") , prt 0 ids , doc (showString ")")])


instance Print Params where
  prt i e = case e of
   ParamList params -> prPrec i 0 (concatD [doc (showString "(") , prt 0 params , doc (showString ")")])


instance Print Param where
  prt i e = case e of
   ParamExpr expr -> prPrec i 0 (concatD [prt 0 expr])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print KeyValuePair where
  prt i e = case e of
   KVP key expr -> prPrec i 0 (concatD [prt 0 key , doc (showString ":") , prt 0 expr])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Key where
  prt i e = case e of
   KeyIdent id -> prPrec i 0 (concatD [prt 0 id])
   KeyString str -> prPrec i 0 (concatD [prt 0 str])


instance Print Literal where
  prt i e = case e of
   IntLiteral n -> prPrec i 0 (concatD [prt 0 n])
   StringLiteral str -> prPrec i 0 (concatD [prt 0 str])
   TrueLiteral  -> prPrec i 0 (concatD [doc (showString "true")])
   FalseLiteral  -> prPrec i 0 (concatD [doc (showString "false")])
   UndefinedLiteral  -> prPrec i 0 (concatD [doc (showString "undefined")])
   ObjectLiteral keyvaluepairs -> prPrec i 0 (concatD [doc (showString "{") , prt 0 keyvaluepairs , doc (showString "}")])
   ArrayLiteral params -> prPrec i 0 (concatD [doc (showString "[") , prt 0 params , doc (showString "]")])


instance Print FunExpr where
  prt i e = case e of
   Fun maybeident paramnames compoundstmt -> prPrec i 0 (concatD [doc (showString "function") , prt 0 maybeident , prt 0 paramnames , prt 0 compoundstmt])


instance Print Expr where
  prt i e = case e of
   FunExpression funexpr -> prPrec i 0 (concatD [prt 0 funexpr])
   AssignExpr lvalue expr -> prPrec i 0 (concatD [prt 0 lvalue , doc (showString "=") , prt 0 expr])
   CondExpr expr0 expr1 expr -> prPrec i 3 (concatD [prt 4 expr0 , doc (showString "?") , prt 0 expr1 , doc (showString ":") , prt 3 expr])
   LOrExpr expr0 expr -> prPrec i 4 (concatD [prt 4 expr0 , doc (showString "||") , prt 5 expr])
   LAndrExpr expr0 expr -> prPrec i 5 (concatD [prt 5 expr0 , doc (showString "&&") , prt 6 expr])
   BitOrExpr expr0 expr -> prPrec i 6 (concatD [prt 6 expr0 , doc (showString "|") , prt 7 expr])
   BitXorExpr expr0 expr -> prPrec i 7 (concatD [prt 7 expr0 , doc (showString "^") , prt 8 expr])
   BitAndExpr expr0 expr -> prPrec i 8 (concatD [prt 8 expr0 , doc (showString "&") , prt 9 expr])
   EqExpr expr0 expr -> prPrec i 9 (concatD [prt 9 expr0 , doc (showString "===") , prt 10 expr])
   NeqExpr expr0 expr -> prPrec i 9 (concatD [prt 9 expr0 , doc (showString "!==") , prt 10 expr])
   LessExpr expr0 expr -> prPrec i 10 (concatD [prt 10 expr0 , doc (showString "<") , prt 11 expr])
   GreaterExpr expr0 expr -> prPrec i 10 (concatD [prt 10 expr0 , doc (showString ">") , prt 11 expr])
   LeqExpr expr0 expr -> prPrec i 10 (concatD [prt 10 expr0 , doc (showString "<=") , prt 11 expr])
   GeqExpr expr0 expr -> prPrec i 10 (concatD [prt 10 expr0 , doc (showString ">=") , prt 11 expr])
   ShlExpr expr0 expr -> prPrec i 11 (concatD [prt 11 expr0 , doc (showString "<<") , prt 12 expr])
   ShrExpr expr0 expr -> prPrec i 12 (concatD [prt 12 expr0 , doc (showString ">>") , prt 13 expr])
   PlusExpr expr0 expr -> prPrec i 12 (concatD [prt 12 expr0 , doc (showString "+") , prt 13 expr])
   MinusExpr expr0 expr -> prPrec i 12 (concatD [prt 12 expr0 , doc (showString "-") , prt 13 expr])
   TimesExpr expr0 expr -> prPrec i 13 (concatD [prt 13 expr0 , doc (showString "*") , prt 14 expr])
   DivExpr expr0 expr -> prPrec i 13 (concatD [prt 13 expr0 , doc (showString "/") , prt 14 expr])
   ModExpr expr0 expr -> prPrec i 13 (concatD [prt 13 expr0 , doc (showString "%") , prt 14 expr])
   PreincExpr expr -> prPrec i 14 (concatD [doc (showString "++") , prt 15 expr])
   PredecExpr expr -> prPrec i 14 (concatD [doc (showString "--") , prt 15 expr])
   PreopExpr unaryop expr -> prPrec i 14 (concatD [prt 0 unaryop , prt 15 expr])
   TypeofExpr expr -> prPrec i 14 (concatD [doc (showString "typeof") , prt 15 expr])
   ParenExpr expr -> prPrec i 15 (concatD [doc (showString "(") , prt 0 expr , doc (showString ")")])
   CallExpr lvalue params -> prPrec i 16 (concatD [prt 0 lvalue , prt 0 params])
   LiteralExpr literal -> prPrec i 17 (concatD [prt 0 literal])
   EvalExpr lvalue -> prPrec i 18 (concatD [prt 0 lvalue])


instance Print UnaryOp where
  prt i e = case e of
   NegOp  -> prPrec i 0 (concatD [doc (showString "!")])
   TildeOp  -> prPrec i 0 (concatD [doc (showString "~")])


instance Print ElseClause where
  prt i e = case e of
   Else stmt -> prPrec i 0 (concatD [doc (showString "else") , prt 0 stmt])
   ElseEmpty  -> prPrec i 0 (concatD [])



